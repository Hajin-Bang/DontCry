// 게임 맵 최단거리

// 문제 설명
// ROR 게임은 두 팀으로 나누어서 진행하며, 상대 팀 진영을 먼저 파괴하면 이기는 게임입니다. 따라서, 각 팀은 상대 팀 진영에 최대한 빨리 도착하는 것이 유리합니다.
// 지금부터 당신은 한 팀의 팀원이 되어 게임을 진행하려고 합니다. 다음은 5 x 5 크기의 맵에, 당신의 캐릭터가 (행: 1, 열: 1) 위치에 있고, 상대 팀 진영은 (행: 5, 열: 5) 위치에 있는 경우의 예시입니다.
// 위 그림에서 검은색 부분은 벽으로 막혀있어 갈 수 없는 길이며, 흰색 부분은 갈 수 있는 길입니다. 캐릭터가 움직일 때는 동, 서, 남, 북 방향으로 한 칸씩 이동하며, 게임 맵을 벗어난 길은 갈 수 없습니다.
// 아래 예시는 캐릭터가 상대 팀 진영으로 가는 두 가지 방법을 나타내고 있습니다.
// 첫 번째 방법은 11개의 칸을 지나서 상대 팀 진영에 도착했습니다.
// 두 번째 방법은 15개의 칸을 지나서 상대팀 진영에 도착했습니다.
// 위 예시에서는 첫 번째 방법보다 더 빠르게 상대팀 진영에 도착하는 방법은 없으므로, 이 방법이 상대 팀 진영으로 가는 가장 빠른 방법입니다.
// 만약, 상대 팀이 자신의 팀 진영 주위에 벽을 세워두었다면 상대 팀 진영에 도착하지 못할 수도 있습니다. 예를 들어, 다음과 같은 경우에 당신의 캐릭터는 상대 팀 진영에 도착할 수 없습니다.
// 게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요. 단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 해주세요.

// 제한사항
// maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수입니다.
// n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않습니다.
// maps는 0과 1로만 이루어져 있으며, 0은 벽이 있는 자리, 1은 벽이 없는 자리를 나타냅니다.
// 처음에 캐릭터는 게임 맵의 좌측 상단인 (1, 1) 위치에 있으며, 상대방 진영은 게임 맵의 우측 하단인 (n, m) 위치에 있습니다.

function solution(maps) {
  const n = maps.length; // 게임 맵의 행의 길이
  const m = maps[0].length; // 게임 맵의 열의 길이
  const dx = [1, -1, 0, 0];
  const dy = [0, 0, 1, -1]; // 상,하,좌,우 이동할 때 사용할 벡터
  const queue = [[0, 0]]; // 큐를 초기화, 좌측상단을 큐에 추가

  // 방문한 위치를 표시할 배열 (거리 정보 포함)
  const visited = Array.from(Array(n), () => Array(m).fill(0)); // 위치를 방문했는지 여부와 해당 위치까지 도달하는 데 필요한 최소 이동 횟수를 저장, 0으로 초기화
  visited[0][0] = 1; // 시작 지점 방문 표시

  while (queue.length) {
    const [x, y] = queue.shift(); // 큐엣 하나의 위치를 꺼내서 현재 위치로 설정

    // 목표 지점에 도달했다면 현재 위치까지의 거리 반환
    if (x === n - 1 && y === m - 1) {
      return visited[x][y];
    }

    for (let i = 0; i < 4; i++) {
      const nx = x + dx[i];
      const ny = y + dy[i];

      // 맵 범위 내에 있고, 벽이 아니며, 아직 방문하지 않았다면
      if (
        nx >= 0 &&
        nx < n &&
        ny >= 0 &&
        ny < m &&
        maps[nx][ny] === 1 &&
        !visited[nx][ny]
      ) {
        visited[nx][ny] = visited[x][y] + 1; // 거리 갱신
        queue.push([nx, ny]); // 큐에 추가
      }
    }
  }

  // 모든 위치를 탐색했으나 목표 지점에 도달하지 못했다면
  return -1;
}
