// 7. 가장 가까운 같은 글자
/* 문자열 s가 주어졌을 때, s의 각 위치마다 자신보다 앞에 나왔으면서, 자신과 가장 가까운 곳에 있는 같은 글자가 어디 있는지 알고 싶습니다.
예를 들어, s="banana"라고 할 때,  각 글자들을 왼쪽부터 오른쪽으로 읽어 나가면서 다음과 같이 진행할 수 있습니다.

b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 자신보다 두 칸 앞에 a가 있습니다. 이는 2로 표현합니다.
n도 자신보다 두 칸 앞에 n이 있습니다. 이는 2로 표현합니다.
a는 자신보다 두 칸, 네 칸 앞에 a가 있습니다. 이 중 가까운 것은 두 칸 앞이고, 이는 2로 표현합니다.
따라서 최종 결과물은 [-1, -1, -1, 2, 2, 2]가 됩니다.

문자열 s이 주어질 때, 위와 같이 정의된 연산을 수행하는 함수 solution을 완성해주세요. */
/* s	    result
"banana"	[-1, -1, -1, 2, 2, 2]
"foobar"	[-1, -1, 1, -1, -1, -1] */

// 답
function solution(s) {
  let answer = [];
  for (i = 0; i < s.length; i++) {
    let distance = 0;
    for (j = i - 1; j >= 0; j--) {
      if (s[i] === s[j]) {
        distance = i - j;
        break;
      }
    }
    answer[i] = distance === 0 ? -1 : distance;
  }
  return answer;
}

// 같은 문자열이 있을 때의 인덱스 값을 빼서 거리 계산
// 계속 원하는 답이 안나와서 chatGPT한테 물어봄..
// => break를 사용: 같은 문자열을 찾았을 때, 바로 for루프를 중지하고 distance를 계산할 수 있도록 해야한다.

// 다른 사람 풀이
const solution = (s) =>
  [...s].map((char, i) => {
    const count = s.slice(0, i).lastIndexOf(char);
    return count < 0 ? count : i - count;
  });
// [...s] => 문자열을 배열로 변환
// slice(0,i) => 0 ~ 현재 인덱스(i) - 1 의 문자열 추출

// lastIndexOf
// 주어진 값과 일치하는 부분을 끝에서부터 역순으로 탐색하여 최초로 마주치는 인덱스를 반환
// 일치하는 부분을 찾을 수 없으면 -1을 반환

// count가 -1이라면 그대로 반환되고, 그렇지 않다면 i - count 즉, i와 count 사이의 거리를 반환
